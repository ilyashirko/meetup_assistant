# Generated by Django 4.0.6 on 2022-08-03 11:54

from datetime import datetime
from random import choices, randint
from django.db import migrations
from phonenumbers import PhoneNumber, region_code_for_number


NAMES = ('Иван', 'Петр', 'Андрей', 'Павел', 'Михаил', 'Арсений', 'Виктор')

LAST_NAMES = ('Иванов', 'Петров', 'Андреев', 'Павлов', 'Михайлов', 'Арсеньев', 'Викторов')

PATRONYMIC = ('Иванов', 'Петров', 'Андреевич', 'Павлович', 'Михаилович', 'Арсеньевич', 'Викторович')

COMPANIES = ('Apple', 'Samsung', 'Xiaomi', 'Honor', 'Vivo', 'Realme')

NUM_PEOPLES = 50

NUM_LECTURES = 10

def enter_data(apps, schema_editor):
    Person = apps.get_model('telegram_bot', 'Person')
    Event = apps.get_model('telegram_bot', 'Event')
    Lecture = apps.get_model('telegram_bot', 'Lecture')
    Question = apps.get_model('telegram_bot', 'Question')

    for _ in range(NUM_PEOPLES):
        Person.objects.create(
            first_name=choices(NAMES),
            last_name=choices(LAST_NAMES),
            patronymic=choices(PATRONYMIC),
            phone_number=PhoneNumber(
                country_code=7,
                national_number=9110000000+randint(1000000, 9999999),
            ),
            email='participant@gmail.com',
            company=choices(COMPANIES),
            telegram_id=randint(10000000, 99999999)
        )
    
    people = Person.objects.all()

    previous_event = Event.objects.create(
        title='Previous event',
        description='This event shouldnt be in bot as current',
        organizer=people[0],
        start=datetime(year=2021, month=1, day=1, hour=12),
        finish=datetime(year=2021, month=12, day=1, hour=12)
    )
    current_event = Event.objects.create(
        title='Current event',
        description='This event should be in bot as current',
        organizer=people[0],
        start=datetime.now(),
        finish=datetime(year=2022, month=12, day=7, hour=12)
    )
    future_event = Event.objects.create(
        title='Future event',
        description='This event shouldnt be in bot as current',
        organizer=people[0],
        start=datetime(year=2023, month=1, day=1, hour=12),
        finish=datetime(year=2023, month=12, day=1, hour=12)
    )
    
    for num in range(1, NUM_PEOPLES):
        previous_event.participants.add(people[num])
        previous_event.save()
        current_event.participants.add(people[num])
        current_event.save()
        future_event.participants.add(people[num])
        future_event.save()

    for num in range(1, NUM_LECTURES):
        Lecture.objects.create(
            title=f'{num} lecture',
            description=f'{num} lecture description.',
            event=previous_event,
            speaker=people[num + 1],
            start=datetime(year=2021, month=8, day=15, hour=num),
            end=datetime(year=2021, month=8, day=15, hour=num +1)
        )
        Lecture.objects.create(
            title=f'{num} lecture',
            description=f'{num} lecture description.',
            event=current_event,
            speaker=people[num + 11],
            start=datetime(year=2022, month=8, day=15, hour=num),
            end=datetime(year=2022, month=8, day=15, hour=num +1)
        )
        Lecture.objects.create(
            title=f'{num} lecture',
            description=f'{num} lecture description.',
            event=future_event,
            speaker=people[num + 21],
            start=datetime(year=2023, month=8, day=15, hour=num),
            end=datetime(year=2023, month=8, day=15, hour=num +1)
        )


class Migration(migrations.Migration):

    dependencies = [
        ('telegram_bot', '0002_event_participants_alter_event_organizer'),
    ]

    operations = [
        migrations.RunPython(enter_data)
    ]
